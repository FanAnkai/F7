#ifndef __MALLOC_H
#define __MALLOC_H
#include "stm32f7xx.h"
#include "lwipopts.h"


/************************ DHT11 数据类型定义******************************/
typedef struct
{
//    uint8_t  humi_high8bit;     //原始数据：湿度高8位
//    uint8_t  humi_low8bit;      //原始数据：湿度低8位
//    uint8_t  temp_high8bit;     //原始数据：温度高8位
//    uint8_t  temp_low8bit;      //原始数据：温度高8位
//    uint8_t  check_sum;         //校验和
    double    humidity;         //实际湿度
    double    temperature;      //实际温度

} DHT11_Data_TypeDef;



#define   MSG_MAX_LEN     500
#define   MSG_TOPIC_LEN   50
#define   KEEPLIVE_TIME   50
#define   MQTT_VERSION    4

// LWIP_MQTT_TEST
// a1uyBz1glUb
// fUnfCXvFGx3msAcT
//2da13a4bff37e121576680ef62049292



#if LWIP_DNS
#define     HOST_NAME       "a1MZHjK2SCF.iot-as-mqtt.cn-shanghai.aliyuncs.com"  //服务器域名
#define     HOST_PORT       1883        //由于是TCP连接，端口必须是1883
#else
#define     HOST_NAME       "139.196.135.135"   //服务器IP地址
#define     HOST_PORT     1883      //由于是TCP连接，端口必须是1883
#endif

#define DEVICE_NAME     "F767_LWIP"
#define PRODUCT_KEY     "a1uyBz1glUb"
#define USER_CLIENT_ID  "123456"


#define     CLIENT_ID     "123456|securemode=3,signmethod=hmacsha1|"       //
#define     USER_NAME     "F767_LWIP&a1uyBz1glUb"                         //用户
#define     PASSWORD      "53427208084CCBCF7213B7BF02E6AC101DF97CC5"      //秘钥

#define     TOPIC0         "/a1uyBz1glUb/" DEVICE_NAME "/user/FYF_TEST"      //订阅的主题
#define     TOPIC1         "/sys/a1uyBz1glUb/" DEVICE_NAME "/thing/service/property/set"
#define     TOPIC2         "/sys/a1uyBz1glUb/" DEVICE_NAME "/thing/event/property/post_reply"

#define     TOPIC3         "/sys/a1uyBz1glUb/" DEVICE_NAME "/thing/event/property/post"

extern int mqtt_connect_flag;

//*****收到订阅的消息！******
//MQTT>>消息质量：QoS0
//MQTT>>消息主题：/sys/a1uyBz1glUb/F767_LWIP/thing/service/property/
//MQTT>>消息内容：{"method":"thing.service.property.set","id":"765854702","params":{"LightLuminance":100},"version":"1.0.0"}


//*****收到订阅的消息！******
//MQTT>>消息质量：QoS0
//MQTT>>消息主题：/a1uyBz1glUb/F767_LWIP/user/FYF_TEST
//MQTT>>消息内容：123
//MQTT>>消息长度：3


enum QoS
{ QOS0 = 0,
  QOS1,
  QOS2
};

enum MQTT_Connect
{
    Connect_OK = 0,
    Connect_NOK,
    Connect_NOTACK
};

//数据交互结构体
typedef struct __MQTTMessage
{
    uint32_t qos;
    uint8_t retained;
    uint8_t dup;
    uint16_t id;
    uint8_t type;
    void *payload;
    int32_t payloadlen;
} MQTTMessage;

//用户接收消息结构体
typedef struct __MQTT_MSG
{
    uint8_t  msgqos;                 //消息质量
    uint8_t  msg[MSG_MAX_LEN];       //消息
    uint32_t msglenth;               //消息长度
    uint8_t  topic[MSG_TOPIC_LEN];   //主题
    uint16_t packetid;               //消息ID
    uint8_t  valid;                  //标明消息是否有效
} MQTT_USER_MSG;

//发送消息结构体
typedef struct
{
    int8_t topic[MSG_TOPIC_LEN];
    int8_t qos;
    int8_t retained;

    uint8_t msg[MSG_MAX_LEN];
    uint8_t msglen;
} mqtt_recv_msg_t, *p_mqtt_recv_msg_t, mqtt_send_msg_t, *p_mqtt_send_msg_t;


void mqtt_thread( void *pvParameters);

/************************************************************************
** 函数名称: my_mqtt_send_pingreq
** 函数功能: 发送MQTT心跳包
** 入口参数: 无
** 出口参数: >=0:发送成功 <0:发送失败
** 备    注:
************************************************************************/
int32_t MQTT_PingReq(int32_t sock);

/************************************************************************
** 函数名称: MQTT_Connect
** 函数功能: 登录服务器
** 入口参数: int32_t sock:网络描述符
** 出口参数: Connect_OK:登陆成功 其他:登陆失败
** 备    注:
************************************************************************/
uint8_t MQTT_Connect(void);

/************************************************************************
** 函数名称: MQTTSubscribe
** 函数功能: 订阅消息
** 入口参数: int32_t sock：套接字
**           int8_t *topic：主题
**           enum QoS pos：消息质量
** 出口参数: >=0:发送成功 <0:发送失败
** 备    注:
************************************************************************/
int32_t MQTTSubscribe(int32_t sock, char *topic, enum QoS pos);

/************************************************************************
** 函数名称: UserMsgCtl
** 函数功能: 用户消息处理函数
** 入口参数: MQTT_USER_MSG  *msg：消息结构体指针
** 出口参数: 无
** 备    注:
************************************************************************/
void UserMsgCtl(MQTT_USER_MSG  *msg);

/************************************************************************
** 函数名称: GetNextPackID
** 函数功能: 产生下一个数据包ID
** 入口参数: 无
** 出口参数: uint16_t packetid:产生的ID
** 备    注:
************************************************************************/
uint16_t GetNextPackID(void);

/************************************************************************
** 函数名称: mqtt_msg_publish
** 函数功能: 用户推送消息
** 入口参数: MQTT_USER_MSG  *msg：消息结构体指针
** 出口参数: >=0:发送成功 <0:发送失败
** 备    注:
************************************************************************/
//int32_t MQTTMsgPublish(int32_t sock, char *topic, int8_t qos, int8_t retained,uint8_t* msg,uint32_t msg_len);
int32_t MQTTMsgPublish(int32_t sock, char *topic, int8_t qos, uint8_t* msg);
/************************************************************************
** 函数名称: ReadPacketTimeout
** 函数功能: 阻塞读取MQTT数据
** 入口参数: int32_t sock:网络描述符
**           uint8_t *buf:数据缓存区
**           int32_t buflen:缓冲区大小
**           uint32_t timeout:超时时间--0-表示直接查询，没有数据立即返回
** 出口参数: -1：错误,其他--包类型
** 备    注:
************************************************************************/
int32_t ReadPacketTimeout(int32_t sock, uint8_t *buf, int32_t buflen, uint32_t timeout);

/************************************************************************
** 函数名称: mqtt_pktype_ctl
** 函数功能: 根据包类型进行处理
** 入口参数: uint8_t packtype:包类型
** 出口参数: 无
** 备    注:
************************************************************************/
void mqtt_pktype_ctl(uint8_t packtype, uint8_t *buf, uint32_t buflen);

/************************************************************************
** 函数名称: WaitForPacket
** 函数功能: 等待特定的数据包
** 入口参数: int32_t sock:网络描述符
**           uint8_t packettype:包类型
**           uint8_t times:等待次数
** 出口参数: >=0:等到了特定的包 <0:没有等到特定的包
** 备    注:
************************************************************************/
int32_t WaitForPacket(int32_t sock, uint8_t packettype, uint8_t times);


void
mqtt_thread_init(void);

#endif



